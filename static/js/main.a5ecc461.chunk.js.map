{"version":3,"sources":["store/createStore.js","Components/Header/index.js","Components/SearchBar/index.js","Components/Rows/index.js","Components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["reducer","combineReducers","searchTerm","state","action","type","payload","store","createStore","Header","className","connect","useState","setSearchTerm","placeholder","id","onChange","event","console","log","target","value","onClick","preventDefault","dispatch","props","rows","sortedUsersArray","sortArrow","isSorted","setIsSorted","sortAscending","setSortAscending","originalArray","users","searchedArray","map","user","name","last","toUpperCase","trim","push","length","src","picture","medium","first","email","phone","moment","dob","date","format","sort","a","b","nameA","nameB","comparison","class","Table","axios","get","then","res","setState","data","results","catch","error","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a5ecc461.chunk.js","sourcesContent":["import {combineReducers, createStore} from 'redux';\r\n\r\nfunction searchTerm(state = '', action) {\r\n    switch (action.type) {\r\n        case 'GET_SEARCH_TERM':\r\n            return action.payload\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst reducer = combineReducers({searchTerm});\r\nexport const store = createStore(reducer);\r\n\r\n// store.subscribe(() => console.log(store.getState()))\r\nexport {searchTerm};","import React from 'react';\r\nimport './Header.css';\r\n\r\n// created a header\r\nfunction Header() {\r\n    return (\r\n\r\n        <header className=\"header\">\r\n            <h2>Employee Directory</h2>\r\n            <h6>Click on the carrot beside Name to sort by heading or use the search box to narrow your results.</h6>\r\n        </header>\r\n    \r\n    )\r\n}\r\n\r\nexport default Header;","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {store} from '../../store/createStore';\r\nimport './SearchBar.css';\r\n\r\nfunction SearchBar() {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        store.dispatch({type: 'GET_SEARCH_TERM', payload: searchTerm})\r\n        setSearchTerm('');\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        console.log('changed')\r\n        setSearchTerm(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-bar-container\">\r\n            <input\r\n            placeholder=\"Employee last name\"\r\n            className=\"search-bar\"\r\n            id=\"search-input\"\r\n            onChange={handleChange}\r\n            value={searchTerm}\r\n            />\r\n            <button onClick={handleSubmit} type=\"submit\">\r\n                Search\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect()(SearchBar);","import React, {useState} from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport \"./rows.css\";\r\nimport moment from \"moment\";\r\n\r\n// going to create the Rows where we're importing the employee data\r\nfunction Rows(props) {\r\n    const [isSorted, setIsSorted] = useState(false);\r\n    const [sortAscending, setSortAscending] = useState(false);\r\n    let searchTerm = props.searchTerm;\r\n    let originalArray = props.users;\r\n    let rows, sortedUsersArray;\r\n    let sortArrow;\r\n    let searchedArray = [];\r\n    if (!sortAscending) {\r\n        sortArrow = \"fas fa-sort-up\";        \r\n    } else if (sortAscending) {\r\n        sortArrow = \"fas fa-sort-down\";        \r\n    }\r\n    // created the sort feature where the up arrow sorts ascending\r\n    function returnAscending(a, b) {\r\n        const nameA = a.name.last.toUpperCase();\r\n        const nameB = b.name.last.toUpperCase();\r\n    \r\n        let comparison = 0;\r\n        if (nameA > nameB) {\r\n        comparison = 1;\r\n        } else if (nameA < nameB) {\r\n        comparison = -1;\r\n        }\r\n        return comparison;\r\n    };\r\n    // created the sort feature where the down arrow sorts descending\r\n    function returnDescending(a, b) {\r\n        const nameA = a.name.last.toUpperCase();\r\n        const nameB = b.name.last.toUpperCase();\r\n    \r\n        let comparison = 0;\r\n        if (nameA > nameB) {\r\n        comparison = -1;\r\n        } else if (nameA < nameB) {\r\n        comparison = 1;\r\n        }\r\n        return comparison;\r\n    };\r\n\r\n    const handleSort = () => {\r\n        setIsSorted(true);\r\n        setSortAscending(!sortAscending);\r\n    };\r\n    // created the seach function\r\n    function handleSearch() {\r\n        originalArray.map((user) => {\r\n        let userName = user.name.last.toUpperCase().trim();\r\n        let formattedSearchTerm = searchTerm.toUpperCase().trim();\r\n            if (userName === formattedSearchTerm) {\r\n                searchedArray.push(user)\r\n            }\r\n        })\r\n        console.log('searchedArray', searchedArray);\r\n    };\r\n    \r\nhandleSearch();\r\n    // setting how the initial data is returned, and the sorted data is then returned\r\n    if (props.users.length > 0 && !isSorted && !searchTerm) {\r\n            rows = originalArray.map((user) => \r\n                <tr>\r\n                    <td><img src={user.picture.medium} /></td>\r\n                    <td>{`${user.name.first} ${user.name.last}`}</td>\r\n                    <td>{user.email}</td>\r\n                    <td>{user.phone}</td>\r\n                    <td>{moment(user.dob.date).format('MM/DD/YYYY')}</td>\r\n                </tr>\r\n            )\r\n        // setting how the data is returned once sorted\r\n        } else if (props.users.length > 0 && isSorted && !searchTerm) {\r\n            if (sortAscending) {\r\n                sortedUsersArray =  props.users.sort(returnAscending);\r\n            } else if (!sortAscending) {\r\n                sortedUsersArray =  props.users.sort(returnDescending);\r\n            }\r\n            rows = sortedUsersArray.map((user) => \r\n            <tr>\r\n                <td><img src={user.picture.medium} /></td>\r\n                <td>{`${user.name.first} ${user.name.last}`}</td>\r\n                <td>{user.email}</td>\r\n                <td>{user.phone}</td>\r\n                <td>{moment(user.dob.date).format('MM/DD/YYYY')}</td>\r\n            </tr>\r\n            )\r\n            // setting the data once the search button is hit\r\n        } else if (searchedArray.length > 0) {\r\n            rows = searchedArray.map((user) => \r\n                <tr>\r\n                    <td><img src={user.picture.medium} /></td>\r\n                    <td>{`${user.name.first} ${user.name.last}`}</td>\r\n                    <td>{user.email}</td>\r\n                    <td>{user.phone}</td>\r\n                    <td>{moment(user.dob.date).format('MM/DD/YYYY')}</td>\r\n                </tr>\r\n            )\r\n        }\r\n\r\n    return (\r\n        <table>\r\n            <tr>\r\n                <th>Image</th>\r\n                <th >Name                    \r\n                        <i class={sortArrow} onClick={handleSort}>\r\n                            {/* {sortText} */}\r\n                        </i>                    \r\n                </th>         \r\n                <th>Phone</th>\r\n                <th>Email</th>\r\n                <th>DOB</th>\r\n            </tr>\r\n            {rows}\r\n        </table>\r\n    )\r\n}\r\n\r\n// had to change props to state so it would render\r\nfunction mapStateToProps(state) {\r\n    return { searchTerm: state.searchTerm }\r\n  }\r\n\r\nexport default connect(mapStateToProps)(Rows)","import React, {Component} from \"react\";\r\nimport \"./table.css\";\r\nimport Row from \"../Rows\";\r\n// import getUsers from \"../../Api\";\r\nimport axios from 'axios';\r\n\r\n// grabbing the Table data\r\nclass Table extends Component  {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {users: []};\r\n\r\n    }\r\n    // api call to axios to return employee data\r\n    componentDidMount() {\r\n        console.log('get users')\r\n        return axios.get(\"https://randomuser.me/api/?results=20&nat=us\")\r\n        .then((res) => {    \r\n            this.setState({users: res.data.results})\r\n            // one user: res.data.results[0]\r\n        })\r\n        .catch(function(error){\r\n          console.log('error', error);\r\n        });\r\n    }\r\n    render() {\r\n\r\n    return (\r\n        <table>            \r\n            <Row users={this.state.users}/>\r\n        </table>\r\n\r\n    )\r\n\r\n}\r\n}\r\n\r\n\r\nexport default Table;","import React, {Component} from 'react';\nimport Header from './Components/Header';\nimport SearchBar from \"./Components/SearchBar\";\nimport Table from \"./Components/Table\";\nimport './App.css';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      <Header />\n      <SearchBar/>\n      <Table/>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {store} from './store/createStore';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}